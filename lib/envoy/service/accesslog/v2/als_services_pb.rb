# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: envoy/service/accesslog/v2/als.proto for package 'envoy.service.accesslog.v2'

require 'grpc'
require 'envoy/service/accesslog/v2/als_pb'

module Envoy
  module Service
    module Accesslog
      module V2
        module AccessLogService
          # [#protodoc-title: gRPC Access Log Service (ALS)]
          #
          # Service for streaming access logs from Envoy to an access log server.
          class Service

            include GRPC::GenericService

            self.marshal_class_method = :encode
            self.unmarshal_class_method = :decode
            self.service_name = 'envoy.service.accesslog.v2.AccessLogService'

            # Envoy will connect and send StreamAccessLogsMessage messages forever. It does not expect any
            # response to be sent as nothing would be done in the case of failure. The server should
            # disconnect if it expects Envoy to reconnect. In the future we may decide to add a different
            # API for "critical" access logs in which Envoy will buffer access logs for some period of time
            # until it gets an ACK so it could then retry. This API is designed for high throughput with the
            # expectation that it might be lossy.
            rpc :StreamAccessLogs, stream(StreamAccessLogsMessage), StreamAccessLogsResponse
          end

          Stub = Service.rpc_stub_class
        end
      end
    end
  end
end
